name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-20.04
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: ${{ secrets.DB_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12.1]
    services:
      postgres:
        image: postgres:15.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: conexaopet_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: psycopg2 prerequisites
      run: sudo apt-get install -y libpq-dev
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Apply Migrations and Collect Static Files
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
    - name: Run Tests
      run: |
        python manage.py test

  deploy:
    name: Deploying
    needs: [test]
    runs-on: ubuntu-20.04
    env:
      EC2_HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST}}
      DB_PORT: ${{ secrets.DB_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
    steps:
    - name: Install docker on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        script: |
            sudo su
            sudo apt-get update
            yes | sudo apt-get install docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            sudo usermod -aG docker ubuntu
            exec bash
    - name: Install docker-compose on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        script: |
            sudo su
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
    
    - name: Deploying Application
      uses: appleboy/ssh-action@master
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEBUG: ${{ secrets.DEBUG }}
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_HOST: ${{ secrets.DB_HOST}}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        EC2_HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        EC2_SSH_KEY_PEM: ${{ secrets.EC2_SSH_KEY_PEM }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        STATICFILES: ${{ secrets.STATICFILES }}
        MEDIAFILES: ${{ secrets.MEDIAFILES }}
        ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}
        REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
        DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        envs: SECRET_KEY,DEBUG,DB_ENGINE,DB_HOST,DB_NAME,DB_PASSWORD,DB_PORT,DB_USER,EC2_HOST_DNS,EC2_SSH_KEY_PEM,EC2_USERNAME,EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,STATICFILES,MEDIAFILES,ACCESS_TOKEN_LIFETIME,REFRESH_TOKEN_LIFETIME,DJANGO_SETTINGS_MODULE
        script: |
            export SECRET_KEY=$SECRET_KEY
            export DEBUG=$DEBUG
            export DB_ENGINE=$DB_ENGINE
            export DB_HOST=$DB_HOST
            export DB_NAME=$DB_NAME
            export DB_PASSWORD=$DB_PASSWORD
            export DB_PORT=$DB_PORT
            export DB_USER=$DB_USER
            export EC2_HOST_DNS=$EC2_HOST_DNS
            export EC2_SSH_KEY_PEM=$EC2_SSH_KEY_PEM
            export EC2_USERNAME=$EC2_USERNAME
            export EMAIL_HOST_USER=$EMAIL_HOST_USER
            export EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
            export STATICFILES=$STATICFILES
            export MEDIAFILES=$MEDIAFILES
            export ACCESS_TOKEN_LIFETIME=$ACCESS_TOKEN_LIFETIME
            export REFRESH_TOKEN_LIFETIME=$REFRESH_TOKEN_LIFETIME
            export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
           
            sudo su
            docker stop conexaopet_web conexaopet_app conexaopet_db
            docker rm conexaopet_web conexaopet_app conexaopet_db
            rm -rf conexaopet-api
            git clone https://github.com/carolahn/conexaopet-api.git
            cd conexaopet-api
            docker-compose -f docker-compose.yml up --build

            exit 0